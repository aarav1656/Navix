import { AccountManager } from "./libs/AccountManager";
import { initializeParas, CoinInfo, OptionType } from "./types";
export declare class NAVISDKClient {
    account: AccountManager;
    accounts: AccountManager[];
    mnemonic: string;
    networkType: string;
    /**
     * Generates a new NAVISDKClient instance.
     * @param mnemonic - The mnemonic phrase to use for account generation. If not provided, a new mnemonic will be generated.
     * @param networkType - The network type to use. Defaults to "mainnet".
     * @param wordLength - The length of the mnemonic phrase. Defaults to 12.
     * @param numberOfAccounts - The number of accounts to generate. Defaults to 10.
     */
    constructor({ mnemonic, networkType, wordLength, numberOfAccounts }?: initializeParas);
    /**
     * Retrieves all accounts stored in the Navi SDK.
     *
     * @returns An array of all accounts.
     */
    getAllAccounts(): AccountManager[];
    /**
     * Retrieves the mnemonic associated with the Navi SDK instance.
     *
     * @returns The mnemonic string.
     */
    getMnemonic(): string;
    /**
     * Retrieves the pool information for a specific coin symbol.
     * If no coin symbol is provided, it retrieves the pool information for all coins.
     * @param coinType The dataType of the coin for which to retrieve the pool information.
     * @returns A Promise that resolves to the pool information.
     */
    getPoolInfo(coinType: CoinInfo): Promise<any>;
    /**
     * Retrieves the reserves for the first account.
     * @returns {Promise<void>} A promise that resolves when the reserves are retrieved.
     */
    getReserves(): Promise<import("@mysten/sui.js/dist/cjs/client").DynamicFieldPage>;
    /**
     * Retrieves the reserve detail for a given asset ID.
     * @param conType - The CoinInfo data type for which to retrieve the reserve detail
     * @returns A Promise that resolves when the reserve detail is retrieved.
     */
    getReserveDetail(conType: CoinInfo): Promise<import("@mysten/sui.js/dist/cjs/client").SuiObjectResponse>;
    /**
     * Retrieves the health factor for a given address.
     *
     * @param address - The address for which to retrieve the health factor.
     * @returns A promise that resolves to the health factor value.
     */
    getHealthFactor(address: string): Promise<number>;
    /**
     * Retrieves the dynamic health factor for a given address and pool.
     *
     * @param address - The address to retrieve the dynamic health factor for.
     * @param coinType - The Type of the pool.
     * @param estimateSupply - The estimated supply value.
     * @param estimateBorrow - The estimated borrow value.
     * @param is_increase - A boolean indicating whether to increase the dynamic health factor.
     * @returns A Promise that resolves to the dynamic health factor.
     */
    getDynamicHealthFactor(address: string, coinType: CoinInfo, estimateSupply: number, estimateBorrow: number, is_increase?: boolean): Promise<void>;
    /**
     * Retrieves all NAVI portfolios for the accounts.
     * @returns A promise that resolves to an array of results for each account.
     */
    getAllNaviPortfolios(): Promise<Map<string, {
        borrowBalance: number;
        supplyBalance: number;
    }>>;
    /**
     * Retrieves the balances of all accounts.
     * @returns A record containing the balances of each coin.
     */
    getAllBalances(): Promise<Record<string, number>>;
    /**
     * Checks the available rewards for a given address.
     * @param address - The address to check rewards for.
     * @param option - The option type for rewards.
     * @returns A promise that resolves with the available rewards.
     */
    getAvailableRewards(address?: string, option?: OptionType): Promise<void>;
}
