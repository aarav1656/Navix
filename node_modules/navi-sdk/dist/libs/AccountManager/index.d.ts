import { Ed25519Keypair } from "@mysten/sui.js/keypairs/ed25519";
import { SuiClient } from "@mysten/sui.js/client";
import { initializeParas } from "../../types";
import { CoinInfo, OptionType } from "../../types";
export declare class AccountManager {
    keypair: Ed25519Keypair;
    client: SuiClient;
    address: string;
    /**
     * AccountManager class for managing user accounts.
     */
    constructor({ mnemonic, networkType, accountIndex }?: initializeParas);
    structRegistry(): void;
    /**
     * Returns the derivation path for a given address index.
     * @param addressIndex - The index of the address.
     * @returns The derivation path.
     */
    getDerivePath(addressIndex: number): string;
    /**
     * Retrieves the public key associated with the account.
     * @returns The public key as a SuiAddress.
     */
    getPublicKey(): string;
    /**
     * getAllCoins is an asynchronous function that retrieves all the coins owned by the account.
     *
     * @param ifPrettyPrint - A boolean indicating whether to print the data in a pretty format. Default is true.
     * @returns A Promise that resolves to the data containing all the coins owned by the account.
     */
    getAllCoins(ifPrettyPrint?: boolean): Promise<any>;
    /**
     * getWalletBalance is an asynchronous function that retrieves the balance of all coins in the wallet.
     *
     * @param ifPrettyPrint - A boolean indicating whether to print the data in a pretty format. Default is false.
     * @returns A Promise that resolves to an object containing the balance of each coin in the wallet.
     */
    getWalletBalance(ifPrettyPrint?: boolean): Promise<Record<string, number>>;
    /**
     * Retrieves coin objects based on the specified coin type.
     * @param coinType - The coin type to retrieve coin objects for. Defaults to "0x2::sui::SUI".
     * @returns A Promise that resolves to the retrieved coin objects.
     */
    getCoins(coinType?: any): Promise<import("@mysten/sui.js/client").PaginatedCoins>;
    /**
     * Creates an account capability.
     * @returns A Promise that resolves to the result of the account creation.
     */
    createAccountCap(): Promise<any>;
    /**
     * Sends coins to multiple recipients.
     *
     * @param coinType - The type of coin to send.
     * @param recipient - An array of recipient addresses.
     * @param amounts - An array of amounts to send to each recipient.
     * @returns A promise that resolves to the result of the transaction.
     * @throws An error if the number of recipients does not match the number of amounts, or if the sender has insufficient balance.
     */
    sendCoinToMany(coinType: any, recipient: string[], amounts: number[]): Promise<any>;
    /**
     * Sends a specified amount of coins to a recipient.
     *
     * @param coinType - The type of coin to send.
     * @param recipient - The address of the recipient.
     * @param amount - The amount of coins to send.
     * @returns A promise that resolves when the coins are sent.
     */
    sendCoin(coinType: any, recipient: string, amount: number): Promise<any>;
    /**
     * Transfers multiple objects to multiple recipients.
     * @param objects - An array of objects to be transferred.
     * @param recipients - An array of recipients for the objects.
     * @returns A promise that resolves with the result of the transfer.
     * @throws An error if the length of objects and recipient arrays are not the same.
     */
    transferObjsToMany(objects: string[], recipients: string[]): Promise<any>;
    /**
     * Transfers an object to a recipient.
     * @param object - The object to be transferred.
     * @param recipient - The recipient of the object.
     * @returns A promise that resolves when the transfer is complete.
     */
    transferObj(object: string, recipient: string): Promise<any>;
    /**
     * Deposits a specified amount of a given coin type to Navi.
     * @param coinType - The coin type to deposit.
     * @param amount - The amount to deposit.
     * @returns A promise that resolves to the result of the deposit transaction.
     * @throws An error if there is insufficient balance for the coin.
     */
    depositToNavi(coinType: CoinInfo, amount: number): Promise<any>;
    /**
     * Deposits a specified amount of a given coin type to Navi with an account cap address.
     * @param coinType - The coin type to deposit.
     * @param amount - The amount to deposit.
     * @param accountCapAddress - The account cap address.
     * @returns A promise that resolves to the result of the deposit transaction.
     * @throws An error if there is insufficient balance for the coin.
     */
    depositToNaviWithAccountCap(coinType: CoinInfo, amount: number, accountCapAddress: string): Promise<any>;
    /**
     * Withdraws a specified amount of coins.
     * @param coinType - The type of coin to withdraw.
     * @param amount - The amount of coins to withdraw.
     * @returns A promise that resolves to the result of the withdrawal.
     */
    withdraw(coinType: CoinInfo, amount: number): Promise<any>;
    /**
     * Withdraws a specified amount of coins with an account cap.
     *
     * @param coinType - The type of coin to withdraw.
     * @param withdrawAmount - The amount of coins to withdraw.
     * @param accountCapAddress - The address of the account cap.
     * @returns A promise that resolves to the result of the withdrawal.
     */
    withdrawWithAccountCap(coinType: CoinInfo, withdrawAmount: number, accountCapAddress: string): Promise<any>;
    /**
     * Borrows a specified amount of a given coin.
     *
     * @param coinType - The type of coin to borrow.
     * @param borrowAmount - The amount of the coin to borrow.
     * @returns A promise that resolves to the result of the borrowing operation.
     */
    borrow(coinType: CoinInfo, borrowAmount: number): Promise<any>;
    /**
     * Repays a specified amount of a given coin type.
     *
     * @param coinType - The coin type or coin symbol to repay.
     * @param repayAmount - The amount to repay.
     * @returns A promise that resolves to the result of the repayment transaction.
     * @throws An error if there is insufficient balance for the specified coin.
     */
    repay(coinType: CoinInfo, repayAmount: number): Promise<any>;
    liquidate(payCoinType: CoinInfo, to_liquidate_address: string, collateralCoinType: CoinInfo, to_liquidate_amount?: number): Promise<any>;
    /**
     * Retrieves the health factor for a given address.
     * @param address - The address for which to retrieve the health factor. Defaults to the instance's address.
     * @returns The health factor as a number.
     */
    getHealthFactor(address?: string): Promise<number>;
    /**
     * Retrieves the dynamic health factor for a given user in a specific pool.
     * @param sender - The address of the user.
     * @param poolName - The name of the pool.
     * @param estimateSupply - The estimated supply value (default: 0).
     * @param estimateBorrow - The estimated borrow value (default: 0).
     * @param is_increase - A boolean indicating whether the health factor is increasing (default: true).
     * @returns The health factor for the user in the pool.
     * @throws Error if the pool does not exist.
     */
    getDynamicHealthFactorAll(sender: string, poolName: string, estimateSupply?: number, estimateBorrow?: number, is_increase?: boolean): Promise<void>;
    /**
     * Retrieves the decimal value for a given coin type.
     * If the coin type has an address property, it uses that address. Otherwise, it uses the coin type itself.
     *
     * @param coinType - The coin type or coin object.
     * @returns The decimal value of the coin.
     */
    getCoinDecimal(coinType: any): Promise<any>;
    parseResult(msg: any): void;
    /**
     * Retrieves the reserves using the client's `getDynamicFields` method.
     * Parses the result using the `parseResult` method.
     */
    getReserves(): Promise<import("@mysten/sui.js/client").DynamicFieldPage>;
    /**
     * Retrieves the detailed information of a reserve based on the provided asset ID.
     * @param assetId - The ID of the asset for which to retrieve the reserve details.
     * @returns A Promise that resolves to the parsed result of the reserve details.
     */
    getReservesDetail(assetId: number): Promise<import("@mysten/sui.js/client").SuiObjectResponse>;
    /**
     * Retrieves the NAVI portfolio for the current account.
     * @param ifPrettyPrint - A boolean indicating whether to print the portfolio in a pretty format. Default is true.
     * @returns A Promise that resolves to a Map containing the borrow and supply balances for each reserve.
     */
    getNAVIPortfolio(address?: string, ifPrettyPrint?: boolean): Promise<Map<string, {
        borrowBalance: number;
        supplyBalance: number;
    }>>;
    /**
     * Retrieves the incentive pools for a given asset and option.
     * @param asset_id - The ID of the asset.
     * @param option - The option type.
     * @param user - (Optional) The user's address. If provided, the rewards claimed by the user and the total rewards will be returned.
     * @returns The incentive pools information.
     */
    getIncentivePools(asset_id: number, option: OptionType, user?: string): Promise<any>;
    /**
     * Retrieves the available rewards for a given address.
     *
     * @param toCheckAddress - The address to check for rewards. Defaults to the current address.
     * @param option - The option type. Defaults to 1.
     * @param ifPrettyPrint - Whether to print the rewards in a pretty format. Defaults to true.
     * @returns An object containing the summed rewards for each asset.
     * @throws If there is an error retrieving the available rewards.
     */
    getAvailableRewards(toCheckAddress?: string, option?: OptionType, ifPrettyPrint?: boolean): Promise<any>;
    /**
     * Claims all available rewards for the specified account.
     * @returns A promise that resolves to the result of the reward claim operation.
     */
    claimAllRewards(): Promise<any>;
}
