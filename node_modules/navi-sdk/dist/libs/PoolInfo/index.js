"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLatestProtocolPackageId = exports.getPoolInfo = void 0;
const axios_1 = __importDefault(require("axios"));
const address_1 = require("../../address");
/**
 * Retrieves pool information for a given coin symbol.
 * @param coinSymbol - The symbol of the coin.
 * @returns The pool information for the specified coin symbol, or all pool information if no coin symbol is provided.
 * @throws If there is an error fetching the pool information.
 */
function getPoolInfo(coinSymbol = "") {
    return __awaiter(this, void 0, void 0, function* () {
        const pool_real = address_1.pool[coinSymbol];
        let poolId = pool_real.assetId;
        try {
            const response = yield axios_1.default.get('https://api-defi.naviprotocol.io/getIndexAssetData');
            const poolInfo = response.data;
            if (poolId != -1) {
                return poolInfo[poolId];
            }
            return poolInfo;
        }
        catch (error) {
            console.error('Error fetching pool information:', error);
            throw error;
        }
    });
}
exports.getPoolInfo = getPoolInfo;
function getLatestProtocolPackageId() {
    return __awaiter(this, void 0, void 0, function* () {
        const apiUrl = 'https://open-api.naviprotocol.io/api/package';
        try {
            const response = yield fetch(apiUrl);
            if (!response.ok) {
                throw new Error(`API call failed with status ${response.status}`);
            }
            const data = yield response.json();
            return data.packageId;
        }
        catch (error) {
            console.error('Failed to update ProtocolPackage:');
        }
    });
}
exports.getLatestProtocolPackageId = getLatestProtocolPackageId;
